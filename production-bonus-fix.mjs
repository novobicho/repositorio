import { Pool } from 'pg';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function ensureProductionBonus() {
  console.log('üöÄ GARANTINDO FUNCIONAMENTO EM PRODU√á√ÉO\n');
  
  try {
    // 1. Verificar se todas as fun√ß√µes necess√°rias existem no storage
    console.log('üîç VERIFICANDO INTEGRIDADE DO SISTEMA...\n');
    
    // Verificar se a tabela user_bonuses existe
    const { rows: tables } = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
        AND table_name = 'user_bonuses'
    `);
    
    if (tables.length === 0) {
      console.log('‚ö†Ô∏è  Criando tabela user_bonuses...');
      await pool.query(`
        CREATE TABLE IF NOT EXISTS user_bonuses (
          id SERIAL PRIMARY KEY,
          user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
          type VARCHAR(50) NOT NULL,
          amount DECIMAL(10,2) NOT NULL,
          remaining_amount DECIMAL(10,2) NOT NULL,
          rollover_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
          rolled_amount DECIMAL(10,2) NOT NULL DEFAULT 0,
          status VARCHAR(20) NOT NULL DEFAULT 'active',
          expires_at TIMESTAMP,
          related_transaction_id INTEGER,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
      `);
      console.log('‚úÖ Tabela user_bonuses criada!');
    } else {
      console.log('‚úÖ Tabela user_bonuses j√° existe');
    }
    
    // 2. Verificar colunas de b√¥nus na system_settings
    const { rows: columns } = await pool.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'system_settings' 
        AND column_name IN (
          'first_deposit_bonus_enabled',
          'first_deposit_bonus_percentage', 
          'first_deposit_bonus_max_amount',
          'first_deposit_bonus_rollover',
          'first_deposit_bonus_expiration'
        )
    `);
    
    const requiredColumns = [
      'first_deposit_bonus_enabled',
      'first_deposit_bonus_percentage', 
      'first_deposit_bonus_max_amount',
      'first_deposit_bonus_rollover',
      'first_deposit_bonus_expiration'
    ];
    
    const existingColumns = columns.map(c => c.column_name);
    const missingColumns = requiredColumns.filter(col => !existingColumns.includes(col));
    
    if (missingColumns.length > 0) {
      console.log(`‚ö†Ô∏è  Adicionando colunas faltantes: ${missingColumns.join(', ')}`);
      
      for (const column of missingColumns) {
        let columnDef = '';
        switch (column) {
          case 'first_deposit_bonus_enabled':
            columnDef = 'BOOLEAN DEFAULT true';
            break;
          case 'first_deposit_bonus_percentage':
            columnDef = 'DECIMAL(5,2) DEFAULT 100.00';
            break;
          case 'first_deposit_bonus_max_amount':
            columnDef = 'DECIMAL(10,2) DEFAULT 250.00';
            break;
          case 'first_deposit_bonus_rollover':
            columnDef = 'DECIMAL(5,2) DEFAULT 3.00';
            break;
          case 'first_deposit_bonus_expiration':
            columnDef = 'INTEGER DEFAULT 7';
            break;
        }
        
        await pool.query(`ALTER TABLE system_settings ADD COLUMN IF NOT EXISTS ${column} ${columnDef}`);
      }
      console.log('‚úÖ Colunas de b√¥nus adicionadas!');
    } else {
      console.log('‚úÖ Todas as colunas de b√¥nus existem');
    }
    
    // 3. Garantir que as configura√ß√µes est√£o corretas
    console.log('\nüîß VERIFICANDO CONFIGURA√á√ïES...\n');
    
    const { rows: settings } = await pool.query('SELECT * FROM system_settings LIMIT 1');
    
    if (settings.length === 0) {
      console.log('‚ö†Ô∏è  Criando configura√ß√µes padr√£o...');
      await pool.query(`
        INSERT INTO system_settings (
          first_deposit_bonus_enabled,
          first_deposit_bonus_percentage,
          first_deposit_bonus_max_amount,
          first_deposit_bonus_rollover,
          first_deposit_bonus_expiration
        ) VALUES (true, 100.00, 250.00, 3.00, 7)
      `);
      console.log('‚úÖ Configura√ß√µes padr√£o criadas!');
    } else {
      const config = settings[0];
      console.log('üìã CONFIGURA√á√ïES ATUAIS:');
      console.log(`- B√¥nus habilitado: ${config.first_deposit_bonus_enabled}`);
      console.log(`- Percentual: ${config.first_deposit_bonus_percentage}%`);
      console.log(`- Valor m√°ximo: R$${config.first_deposit_bonus_max_amount}`);
      console.log(`- Rollover: ${config.first_deposit_bonus_rollover}x`);
      console.log(`- Expira√ß√£o: ${config.first_deposit_bonus_expiration} dias`);
    }
    
    // 4. Criar √≠ndices para performance em produ√ß√£o
    console.log('\n‚ö° OTIMIZANDO PARA PRODU√á√ÉO...\n');
    
    try {
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_user_bonuses_user_id ON user_bonuses(user_id);
        CREATE INDEX IF NOT EXISTS idx_user_bonuses_type ON user_bonuses(type);
        CREATE INDEX IF NOT EXISTS idx_user_bonuses_status ON user_bonuses(status);
        CREATE INDEX IF NOT EXISTS idx_payment_transactions_user_type_status ON payment_transactions(user_id, type, status);
      `);
      console.log('‚úÖ √çndices de performance criados!');
    } catch (error) {
      console.log('‚ö†Ô∏è  Alguns √≠ndices j√° existem (normal)');
    }
    
    // 5. Verificar integridade dos webhooks
    console.log('\nüîó VERIFICANDO INTEGRA√á√ÉO COM WEBHOOKS...\n');
    
    // Verificar se existem transa√ß√µes completed sem b√¥nus
    const { rows: unprocessedDeposits } = await pool.query(`
      SELECT pt.id, pt.user_id, pt.amount, pt.created_at
      FROM payment_transactions pt
      WHERE pt.type = 'deposit' 
        AND pt.status IN ('completed', 'approved')
        AND pt.user_id NOT IN (
          SELECT DISTINCT user_id 
          FROM user_bonuses 
          WHERE type = 'first_deposit'
        )
        AND NOT EXISTS (
          SELECT 1 FROM payment_transactions pt2 
          WHERE pt2.user_id = pt.user_id 
            AND pt2.type = 'deposit' 
            AND pt2.status IN ('completed', 'approved')
            AND pt2.created_at < pt.created_at
        )
      ORDER BY pt.created_at DESC
      LIMIT 10
    `);
    
    if (unprocessedDeposits.length > 0) {
      console.log(`‚ö†Ô∏è  Encontrados ${unprocessedDeposits.length} primeiro dep√≥sitos sem b√¥nus!`);
      console.log('üí° Execute o script de corre√ß√£o retroativa quando necess√°rio.');
    } else {
      console.log('‚úÖ Todos os primeiro dep√≥sitos t√™m b√¥nus aplicados!');
    }
    
    // 6. Teste de conectividade
    console.log('\nüß™ TESTE DE CONECTIVIDADE...\n');
    
    const { rows: testQuery } = await pool.query(`
      SELECT 
        COUNT(DISTINCT u.id) as total_users,
        COUNT(DISTINCT pt.id) as total_deposits,
        COUNT(DISTINCT ub.id) as total_bonuses
      FROM users u
      LEFT JOIN payment_transactions pt ON u.id = pt.user_id AND pt.type = 'deposit' AND pt.status IN ('completed', 'approved')
      LEFT JOIN user_bonuses ub ON u.id = ub.user_id AND ub.type = 'first_deposit'
    `);
    
    const stats = testQuery[0];
    console.log(`üìä ESTAT√çSTICAS DO SISTEMA:`);
    console.log(`- Total de usu√°rios: ${stats.total_users}`);
    console.log(`- Total de dep√≥sitos: ${stats.total_deposits}`);
    console.log(`- Total de b√¥nus: ${stats.total_bonuses}`);
    
    console.log('\nüéâ SISTEMA PRONTO PARA PRODU√á√ÉO!');
    console.log('\nüìù PR√ìXIMOS PASSOS PARA DEPLOY:');
    console.log('1. Commitar o arquivo server/routes.ts');
    console.log('2. Fazer deploy para produ√ß√£o');
    console.log('3. Executar este script em produ√ß√£o para garantir integridade');
    console.log('4. Monitorar logs de webhook para confirmar funcionamento');
    
  } catch (error) {
    console.error('‚ùå ERRO:', error.message);
    console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
    console.log('- Verificar conex√£o com banco de dados');
    console.log('- Verificar permiss√µes de usu√°rio do banco');
    console.log('- Verificar se DATABASE_URL est√° configurada corretamente');
  } finally {
    await pool.end();
  }
}

ensureProductionBonus();